{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Main \u00b6 Basics \u00b6 Garry\u2019s Mod 9, shortened as GMOD 9, is a mod for Half-Life 2, but doesn\u2019t actually require it to run, even though some textures will be bugged. History \u00b6 GMOD was created in December 2004, by Garry Newman , while he was experimenting with the Source engine physics. In 2006, Garry\u2019s Mod became a official game available in Steam, but right now we\u2019re talking about Garry\u2019s Mod 9 , which was made in 2005, and was the last version of GMOD to be free. Features \u00b6 Lua programming language support (for modding) Editing (you can make GMOD 9 - LMOD) Realistic physics (thanks to Half-Life 2!)","title":"Main"},{"location":"#main","text":"","title":"Main"},{"location":"#basics","text":"Garry\u2019s Mod 9, shortened as GMOD 9, is a mod for Half-Life 2, but doesn\u2019t actually require it to run, even though some textures will be bugged.","title":"Basics"},{"location":"#history","text":"GMOD was created in December 2004, by Garry Newman , while he was experimenting with the Source engine physics. In 2006, Garry\u2019s Mod became a official game available in Steam, but right now we\u2019re talking about Garry\u2019s Mod 9 , which was made in 2005, and was the last version of GMOD to be free.","title":"History"},{"location":"#features","text":"Lua programming language support (for modding) Editing (you can make GMOD 9 - LMOD) Realistic physics (thanks to Half-Life 2!)","title":"Features"},{"location":"cheatsheet/","text":"Cheatsheet \u00b6 Overview \u00b6 Lua is a lightweight and flexible scripting language that is designed to be embedded in other programs. It has a simple syntax and is easy to learn, making it a popular choice for writing mods for Garry\u2019s Mod 9. Basic Syntax \u00b6 Comments \u00b6 1 2 3 4 5 6 -- This is a comment --[[ This is a multiline comment, and i can write more lines until infinity! ]] -- Variables \u00b6 1 2 3 4 5 6 7 8 -- declaring a variable local variable = \"value\" -- assigning a new value to a variable variable = \"new value\" -- declaring multiple variables at once local x , y , z = 1 , 2 , 3 Operators \u00b6 1 2 3 4 5 6 7 8 9 10 11 -- arithmetic operators + , - , * , / , % , ^ -- relational operators == , ~= , < , > , <= , >= -- logical operators and , or , not -- concatenating strings .. Control Structures \u00b6 If-Else Statements \u00b6 1 2 3 4 5 6 7 if condition1 then -- code to execute if condition1 is true elseif condition2 then -- code to execute if condition1 is false and condition2 is true else -- code to execute if both condition1 and condition2 are false end For Loops \u00b6 Note: increment is optional, by default, it\u2019s 1 1 2 3 for i = startValue , endValue , increment do -- loop body end While Loops \u00b6 1 2 3 while condition do -- loop body, the condition can be true to make it an infinite loop end Data Types \u00b6 Numbers \u00b6 1 2 local a = 42 local b = 3.14 Strings \u00b6 1 2 3 4 5 6 local a = \"Hello, World!\" local b = 'Single quoted string' local c = [[ Multi-line string I can also write lines until infinity here! ]] Booleans \u00b6 1 2 local a = true local b = false Tables \u00b6 1 2 local a = { 1 , \"two\" , 3.0 } local b = { x = 10 , y = 20 } Functions \u00b6 1 2 3 function add ( a , b ) return a + b end Functions \u00b6 Defining Functions \u00b6 1 2 3 function add ( a , b ) return a + b end Calling Functions \u00b6 1 2 local result = add ( 2 , 3 ) -- print(result) outputs 5 Anonymous Functions \u00b6 1 2 3 local add = function ( a , b ) return a + b end Variable Arguments \u00b6 1 2 3 4 5 function printArgs (...) for i , v in ipairs ({...}) do print ( i , v ) end end Libraries \u00b6 Standard Libraries \u00b6 1 2 3 4 5 6 7 8 9 10 -- accessing the string library local s = \"Hello, World!\" print ( string.upper ( s )) -- accessing the math library local a = math.cos ( 45 ) -- accessing the table library local t = { 1 , 2 , 3 } table.insert ( t , 4 ) Custom Libraries \u00b6 1 2 3 4 5 6 7 8 9 10 -- defining a custom library mylib = {} function mylib . add ( a , b ) return a + b end -- using the custom library in another file local mylib = require ( 'mylib' ) local result = mylib . add ( 2 , 3 ) GMOD 9 Cheatsheet \u00b6 Player-related \u00b6 _PlayerShowScoreboard(playerid) - Shows the scoreboard on the specified players screen. _PlayerSetSprint(playerid, bool) - Enable/Disable sprint for player. _PlayerFreeze(playerid, bool) - Freeze the specified player. _PlayerGetShootPos(playerid) - Returns the vector of the player\u2019s shoot position. _PlayerGetShootAng(playerid) - Returns the forward vector of the player\u2019s shoot angle. _PlayerGetActiveWeapon(playerid) - Returns the player\u2019s active weapon id. _PlayerKill(playerid) - Kill the specified player. _PlayerGiveAmmo(playerid, amount, ammotype, playsounds) - Give specified player ammo. playsounds is bool. _PlayerRespawn(playerid) - Force player to respawn. _PlayerSetDrawTeamCircle(playerid, bool) - Sets whether to draw the team circle or not. _PlayerInfo(playerid, request) - Returns info about a specific layer. Check _PlayerInfo page for usage. _PlayerChangeTeam(playerid, teamid) - Changes a player\u2019s team. _PlayerSetModel(playerid, model) - Changes a player\u2019s model. _PlayerGetRandomAllowedModel() - Returns a random allowed player model. _PlayerSetHealth(playerid, health) - Changes a player\u2019s health. _PlayerSetArmor(playerid, armor) - Changes a player\u2019s armor. _PlayerSetMaxSpeed(playerid, speed) - Changes a player\u2019s maximum speed. _PlayerAddScore(playerid, score) - Add to players score (can be minus). _PlayerSetScore(playerid, score) - Sets to players score. _PlayerAddDeath(playerid, score) - Add to players deaths score (can be minus). _PlayerGiveItem(playerid, item) - Give player named item. _PlayerGiveSWEP(playerid, script) - Give player scripted weapon. _PlayerRemoveAllWeapons(playerid) - Strip all o a player\u2019s weapons. _PlayerRemoveWeapon(playerid, item) - Strip a specific weapon. _PlayerAllowDecalPaint(playerid) - Allow the player to spraypaint now rather than waiting the 30 or so seconds. _PlayerSetDrawViewModel(playerid, bool) - Sets whether to draw the player\u2019s view model. _PlayerSelectWeapon(playerid, item) - Select weapon. _PlayerSetDrawWorldModel(playerid, bool) - Sets whether to draw the player\u2019s world model. _PlayerOption(playerid, callback, timeout) - Player has an option to select. _PlayerSetVecView(playerid, vector) - Sets the position of the view vector (0, 0, 64) default. _PlayerIsKeyDown(playerid, key) - Check whether specified key is pressed. _PlayerSpectatorStart(playerid, mode) - Start spectating. _PlayerSpectatorTarget(playerid, target) - Set spectator target for player. _PlayerSpectatorEnd(playerid) - Stop spectating mode. _PlayerSetVecDuck(playerid, vector) - Sets the position of the duck view vector (0, 0, 24) default. _ScreenText(playerid, message, x, y, r, g, b, a, fadeid, fadeout, holdtime, effect, channel) - Advanced function to print text to the screen. effect can be set to 0-2 and channel 0-5. _PrintMessage(playerid, type, message) - Print a message to a specific player. _PrintMessageAll() - Is like _PrintMessage() but for everyone on the server. _PlayerPreferredModel(playerid) - Returns the player\u2019s preferred model. Returns a blank if the model isn\u2019t valid. _PlayerSilentKill(playerid, respawn_time, dissolve) - Silently kill a player. _PlayerDetonateTripmines(playerid) _PlayerHolsterWeapon(playerid) _PlayerSetFOV(playerid, fov, time) _PlayerSetFlashlight(playerid, state) _PlayerStopZooming(playerid) _PlayerSetChaseCamDistance(playerid, distance) _PlayerLockInPlace(playerid, bool) _PlayerRemoveAllAmmo(playerid) _PlayerDisableAttack(playerid, bool) _PlayerShowCrosshair(playerid, bool) _PlayerEnableSprint(playerid, bool) _PlayerViewModelSequence(playerid, sequence) - If successful returns the length of the sequence in seconds. _PlayerGetLimit(playerid, limit) _PlayerSetAnimation(playerid, sequence) - Sets a player\u2019s animation. _PlayerSetWeaponSequence(player, sequence) - Sets a players weapon activity. _PlayerIsCrouching(playerid) - Returns true if a player is crouching. _PlayerUseVehicle(playerid, vehicle) - Make a player attempt to enter a vehicle. _PlayerGod(playerid, bool) - Give a player God Mode. _PlayerHasWeapon(playerid, item) - Returns true if the player has this weapon. _PlayerWeaponTranslateSequence(player, sequence) - Let the player\u2019s weapon decide how we should act out specific sequence. _player.ShowPanel - Show/Hide a panel by name. _player.SetContextMenu(playerid, name) - Set the player\u2019s context menu. _player.GetFlashlight(player) - returns true if flashlight is on. _player.SetFlashlight(player, on) - Set player FL on/off. _player.LastHitGroup(player) - Get the las place the player was hit. _player.ShouldDropWeapon(player, bool) - Should player drop weapon on death? Entity-related \u00b6 _EntSetMaterial(entid, material_filename) - Set the material of specified entity. _EntSetGravity(entid, gravity) - Set the gravity for specified entity. _EntGetType(entid) - Returns a entity type name. _EntGetByName(name) - Returns an entity by target name (0 if not found). _EntGetPos(entid) - Returns a vector representing the position of the entity. _EntEmitSound(entid, filename) - Make entity emit sound. _EntEmitSoundEx(entid, filename, volume_multiplier, pitch_multiplier) - Make entity emit sound. _EntSetPos(entid, vector3 pos) - Sets the position of the entity. _EntGetVelocity(entid) - Gets the entity velocity. Returned as a vector3. _EntSetVelocity(entid, vector3_velocity) - Sets the velocity of the entity. _EntGetForwardVector(entid) - Returns the forward vector. _EntGetRightVector(entid) - Returns the right vector. _EntGetUpVector(entid) - Returns the up vector. _EntFire(entid, action, value, delay) - ent_fire an entity. _EntCreate(entname) - Creates but doesn\u2019t spawn specified entity. _EntSpawn(entindex) - Spawns specified entity. _EntActivate(entindex) - Activate an entity. _EntSetKeyValue(entindex, string_keyname, string_keyvalue) - Sets an entity keyvalue (Must be done before spawning!). _EntSetModel(ent, model_name) - Sets the model of an entity. PRE-CACHE THE MODEL FIRST. _EntSetOwner(ent, ownerid) - Sets the owner. _EntGetOwner(ent) - Gets the entity\u2019s owner. _EntRemove(entindex) - Removes entity.. _EntExists(entindex) - Check if entity exists. _EntPrecacheModel(model_name) - Pre-caches a model. _EntSetAng(entid, vector3_ang) - Sets the angle of the entity (using a forward vector). _EntSetAngAngle(entid, vector3_angle) - Sets the ANGLE of the entity. _EntGetAng(entid) - Returns the angle as a normalized \u2018forward\u2019 vector. _EntGetAngAngle(entid) - Returns the angle as a vector3. _EntGetModel(entid) - Returns the entity\u2019s model name. _EntitiesFindByClass(classname) - Returns a table of entities (or nil if none). _EntitiesFindInSphere(vector_position, radius) - Returns a table of entities contained in the sphere. _EntitiesFindByName(targetname) - Returns a table of entities (or nil if none). _EntityGetPhysicsAttacker(entity) - Returns the last physics attacker. _EntitySetPhyscsAttacker(entity, attacker) - Sets the physics attacker on a specified object. _EntSetGroundEntity(entity, groundentity) - Pass entity as -1 to clear the ground entity. _EntGetGroundEntity(entity, groundentity) - Pass entity as -1 to clear the ground entity. _EntSetMoveType(entity, type) - Sets the movetype. _EntGetMoveType(entity) - Gets the movetype. _EntSetMoveCollide(entity, type) - Sets the movecollide. _EntGetMoveCollide(entity) - Gets the movecollide. _EntSetSolid(entity, type) - Sets the solid type. _EntGetSolid(entity) - Gets the solid type. _EntSetCollisionGroup(entity, group) - Sets the collision group. _EntGetCollisionGroup(entity) - Gets the collision group. _EntGetWaterLevel(entity) - Returns a number representing how under water an entity is. 0 means not underwater. 3 is totally underwater. _EntSetActivity(entid, int_sequence) - Sets anactivity for an ent. Works for NPC\u2019s only. _EntGetDisposition(npc, entity) - Gets an enemy disposition. _EntSetParent(entid, parent, attachment) - Sets an entities parent. _EntGetParent(entid) - Gets an entities parent. _EntGetName(entid) - Gets an entities name. _EntSetName(entid, name) - Sets an entities name. _EntSetMaxHealth(entid, health) - Gets entity max health. _EntGetMaxHealth(entid) - Sets entity max health. Effects-related \u00b6 _EffectInit() - Resets the effect data _EffectSetOrigin(vector) _EffectSetAngles(vector) _EffectSetNormal(vector) _EffectSetStart(vector) _EffectSetEnt(entid) _EffectSetFlags(int) _EffectSetScale(float) _EffectSetMagnitude(float) _EffectSetRadius(float) _EffectSetAttachIndex(int) _EffectDispatch(name) File manipulation \u00b6 _file.Exists(filename) - Returns true if file exists. _file.Read(filename) - Reads a file into a string. _file.Write(filename, string) - Writes a string to a file. _file.CreateDir(folder) - Creates Dir Hierarchy. _file.IsDir(folder) - Returns true if is Dir. _file.Find(wildcard) - Finds files, returns table, parameter should be like \u201cmaps/-.bsp\u201d. _file.Delete(wildcard) - Deletes specified file. _file.Rename(before, after) - Renames specified file. _ForceFileConsistency(filename) - Force the file to be the same on client and server. Should be called after pre-caching the file. Server-related \u00b6 _StartNextLevel(map_name) - Starts the next level. _GetNextMap() - Returns next map name. _GetCurrentMap() - Returns current map name. _GetRule(rule_string) - Gets a rule. _ServerCommand(command) - Runs a console command. Don\u2019t forget to put \\n in the end. _GameSetTargetIDRules(int_rule) - Sets targetID rules. _PluginMsg(playerid, title, message, time, r, g, b, a, level) - Sends a plugin message. _PluginText(playerid, title, message, time, r, g, b, a, level) - Sends plug in text. _GetConVar_Float(name) - Get a server convar float. _GetConVar_String(name) - Get a server convar string. _GetConVar_Bool(name) - Get a server convar bool. _GetClientConVar_String(playerid, name) - Get a client convar string. _CurTime() - Returns the current time in seconds. _MaxPlayers() - Returns the max players in the server. _RunString(command) - Runs a command in the main gameplay script. _GetModPath() - Gets the path to the gmod folder (on the server). No trailing slash. _IsDedicatedServer() - Returns whether dedicated server or not. _Msg(message) - Outputs message to console. _OpenScript(filename) - Opens a script. _ALERT(message) - Internal Lua usage. Outputs error message. Trace \u00b6 _TraceAttack(victim, inflictor, attacker, amount) - Attack using the last trace. _TraceSetCollisionGroup(group) - Sets the collision group for the next trace to use. _TraceSetMask(group) - Sets the MASK_ to use for the next trace. _TraceLine(vector_start, vector_direction, length, ignore) - Traces a line. ignore is optional. _TraceEndPos() - Return the end pos from the last trace. _TraceFraction() - Return the fraction of trace completed. _TraceHitWorld() - Return the true if the last trace hit the world. _TraceHitNonWorld() - Return the true if the last trace hit non world. _TraceHit() - Return the true if the last trace hit something. _TraceGetEnt() - Return the entity that the last trace hit. _TraceGetSurfaceNormal - Return the normal of the surface that the trace hit. _TraceDidHitSky() - Returns true if last hit was the sky. _TraceDidHitHitbox() - Returns true if last hit was some kind of hitbox. _TraceGetTexture() - Returns the name of the texture that we hit. _TraceDidHitWater() - Returns true if we hit water. _MakeDecal(decal) - Makes a decal using the last trace. PlayerLookTrace(playerid, length) - Traces a line where player\u2019s looking Sounds \u00b6 _PlaySound(sound_name) - Play a sound. _PlaySoundPlayer(playerid, sound_name) - Play a sound to a specific player. GModText \u00b6 _GModText_Start(font_name) - Initialize the text. _GModText_SetPos(x, y) - Set Position. _GModText_AllowOffscreen(bool) - Allow the text to go offscreen. _GModText_SetEntity(entindex) - Set entity to hover over. _GModText_SetColor(r, g, b, a) - Set Colour. _GModText_SetTime(duration, fadein, fadeout) - Set Times. _GModText_SetDelay(delay) - Set delay time. _GModText_SetText(text) - Set Times. _GModText_SetAdditive(bool) - Set Additive mode. _GModText_SetEntityOffset(vector) - Set entity offset to draw the text at. _GModText_Send(playerid, index) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModText_Hide(playerid, index, fade_time, delay) - Hides specified text. _GModText_HideAll(playerid) - Hides All texts. _GModText_SendAnimate(playerid, index, length, ease) - The same as normal send but will animate from Send to the new values. GModRect \u00b6 _GModRect_Start(material) - Initialize the rect. _GModRect_SetPos(x, y, width, height) - Set Position. _GModRect_SetEntity(entindex) - Set entity to hover over. _GModRect_SetColor(r, g, b, a) - Set Colour. _GModRect_SetTime(duration, fadein, fadeout) - Set Times. _GModRect_SetDelay(delay) - Set delay time. _GModRect_SetAdditive(bool) - Set Additive mode. _GModRect_SetEntityOffset(vector) - Set entity offset to draw the text at. _GModRect_Send(playerid, index) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModRect_SendAnimate(playerid, index, length, ease) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModRect_Hide(playerid, index, fade_time, delay) - Hides specified rect. _GModRect_HideAll(playerid) - Hides All rects. GModQuad \u00b6 _GModQuad_Hide(playerid, index, fade_time, delay) - Hides specified world quads. _GModQuad_HideAll(playerid) - Hides All world quads. _GModQuad_Start(material) - Initialize the quad. _GModQuad_SetVector(corner, vector) - Set a vector of one of the quad\u2019s corners. Acceptable corner values: 0-3. _GModQuad_SetTimings(delay, fadein, life, fadeout) - Set Timings. _GModQuad_SetEntity(entityid) - SetEntity to follow. _GModQuad_Send(playerid, index) - Send a quad to player. All players if player is 0. _GModQuad_SenAnimate(playerid, index, length, ease) - Send a quad to player. All players if player is 0. Game Events \u00b6 _gameevent.Start(name) - Starts a (fake) gameevent. _gameevent.SetString(name, value) - Set Variable. _gameevent.SetInt(name, value) - Set Variable. _gameevent.Fire() - Fire event. Spawnmenu \u00b6 _spawnmenu.AddItem(playerid, category, name, modelent) _spawnmenu.RemoveCategory(playerid, category) _spawnmenu.RemoveAll(playerid) _spawnmenu.SetCategory(playerid, category) NPC-related \u00b6 _SetDefaultRelationship(class, class, disposition) - Sets the default relationship between two life types. _npc.ExitScriptedSequence(ent) _npc.SetSchedule(end, sched) _npc.SetLastPosition(ent, vector) _npc.AddRelationship(ent, ent, disposition, priority) - priority is int Physics-related \u00b6 _phys.EnableMotion(entid, boo) - Enable/Disable motion. _phys.EnableDrag(entid, bool) - Enable/Disable drag. _phys.EnableGravity(entid, bool) - Enable/Disable gravity. _phys.EnableCollisions(entid, bool) - Enable/Disable Collisions. _phys.GetMass(entid) - Gets mass. _phys.SetMass(entid, mass) - Sets mass. _phys.Sleep(entid) - Make object sleep. _phys.Wake(entid) - Wake a sleeping object. _phys.IsAsleep(entid) - Check whatever object is rested. _phys.HasPhysics(entid) - Returns true if entity has a physics object. _phys.ConstraintSetEnts(constraint, entity_1, entity_2) - Set Entities for constraint. _phys.ApplyForceCenter(entid, force) - Pushes an object from the center. force is vector3. _phys.ApplyForceOffset(entid, force, worldpos) - Pushes an object from the center. force and worldpos are vector3. _phys.ApplyTorqueCenter(entid, force) - Apply torque to the object. force is vector3. Team-related \u00b6 _TeamAddScore(teamid, score) - Add score for a team. _TeamSetScore(teamid, score) - Set score for a team. _TeamNumPlayers(teamid) - Get the number of players on a team. _TeamCount() - Returns the number of teams _TeamScore(teamid) - Returns the total team score. _TeamSetName(teamid, name) - Sets the name of the team. Utilities \u00b6 _util.PlayerByName(name) - Returns playerid of player with name. _util.PlayerByUserId(playerid) - Returns playerid. _util.EntsInBox(min, max) - Returns entities contained in a box. min and max are vectors. _util.DropToFloor(ent) - Drops entity to floor. _util.ScreenShake(pos, amp, frequency, duration, radius) - Shakes screen. _util.PointAtEntity(ent1, ent2) - Point one entity towards the other. SWEP-related \u00b6 All these function are only used when making SWEPs, check SWEP part. _WeaponScriptedAssign(weapon, script) Assign a script to a scripted weapon. _SWEPSetSound(weapon_index, action, sound) Sets SWEP sound. _SWEPUseAmmo(weapon_index, clip[0|1], amount) Takes ammo from SWEP gun. _SWEPUpdateVariables(weapon_index) Re-reads all the \u2018fetch\u2019 variables. You should call this if you have changed the accuracy etc. _SWEPRunString(weapon_index, string) Runs a Lua string in the weapon\u2019s Lua instance. _swep.GetClipAmmo(weapon_id, clip[0|1]) Get amount of ammo in a clip. _swep.SetClipAmmo(weapon_index, clip[0|1], clip) Get amount of ammo in a clip. _swep.GetDeathIcon(weapon_index) Gets death icon name. Weapon-related \u00b6 _WeaponSetModel(weapon_name, model_type, model_name) Sets weapon model. _WeaponSetSlot(weapon_name, slot, pos) - Sets weapon slot. _WeaponSetSound(weapon_name action, sound) - Sets weapon sound. _WeaponSetFOV(weapon_name, fov) - Sets a weapon\u2019s draw FOV. _WeaponFlipHands(weapon_name, bool) - Flips a weapon\u2019s hands. _WeaponSetDamage(weapon_name, damage) - Sets the damage that a bullet from this gun does. _WeaponSetup(weapon_name, anim_prefix, clip_size_1, clip_size_2, default_ammo_1, default_ammo_2, primary_ammo, secondary_ammo) - Sets animation prefix. (thanks to the GMOD 9 lua docs for the Lua reference)","title":"Cheatsheet"},{"location":"cheatsheet/#cheatsheet","text":"","title":"Cheatsheet"},{"location":"cheatsheet/#overview","text":"Lua is a lightweight and flexible scripting language that is designed to be embedded in other programs. It has a simple syntax and is easy to learn, making it a popular choice for writing mods for Garry\u2019s Mod 9.","title":"Overview"},{"location":"cheatsheet/#basic-syntax","text":"","title":"Basic Syntax"},{"location":"cheatsheet/#comments","text":"1 2 3 4 5 6 -- This is a comment --[[ This is a multiline comment, and i can write more lines until infinity! ]] --","title":"Comments"},{"location":"cheatsheet/#variables","text":"1 2 3 4 5 6 7 8 -- declaring a variable local variable = \"value\" -- assigning a new value to a variable variable = \"new value\" -- declaring multiple variables at once local x , y , z = 1 , 2 , 3","title":"Variables"},{"location":"cheatsheet/#operators","text":"1 2 3 4 5 6 7 8 9 10 11 -- arithmetic operators + , - , * , / , % , ^ -- relational operators == , ~= , < , > , <= , >= -- logical operators and , or , not -- concatenating strings ..","title":"Operators"},{"location":"cheatsheet/#control-structures","text":"","title":"Control Structures"},{"location":"cheatsheet/#if-else-statements","text":"1 2 3 4 5 6 7 if condition1 then -- code to execute if condition1 is true elseif condition2 then -- code to execute if condition1 is false and condition2 is true else -- code to execute if both condition1 and condition2 are false end","title":"If-Else Statements"},{"location":"cheatsheet/#for-loops","text":"Note: increment is optional, by default, it\u2019s 1 1 2 3 for i = startValue , endValue , increment do -- loop body end","title":"For Loops"},{"location":"cheatsheet/#while-loops","text":"1 2 3 while condition do -- loop body, the condition can be true to make it an infinite loop end","title":"While Loops"},{"location":"cheatsheet/#data-types","text":"","title":"Data Types"},{"location":"cheatsheet/#numbers","text":"1 2 local a = 42 local b = 3.14","title":"Numbers"},{"location":"cheatsheet/#strings","text":"1 2 3 4 5 6 local a = \"Hello, World!\" local b = 'Single quoted string' local c = [[ Multi-line string I can also write lines until infinity here! ]]","title":"Strings"},{"location":"cheatsheet/#booleans","text":"1 2 local a = true local b = false","title":"Booleans"},{"location":"cheatsheet/#tables","text":"1 2 local a = { 1 , \"two\" , 3.0 } local b = { x = 10 , y = 20 }","title":"Tables"},{"location":"cheatsheet/#functions","text":"1 2 3 function add ( a , b ) return a + b end","title":"Functions"},{"location":"cheatsheet/#functions_1","text":"","title":"Functions"},{"location":"cheatsheet/#defining-functions","text":"1 2 3 function add ( a , b ) return a + b end","title":"Defining Functions"},{"location":"cheatsheet/#calling-functions","text":"1 2 local result = add ( 2 , 3 ) -- print(result) outputs 5","title":"Calling Functions"},{"location":"cheatsheet/#anonymous-functions","text":"1 2 3 local add = function ( a , b ) return a + b end","title":"Anonymous Functions"},{"location":"cheatsheet/#variable-arguments","text":"1 2 3 4 5 function printArgs (...) for i , v in ipairs ({...}) do print ( i , v ) end end","title":"Variable Arguments"},{"location":"cheatsheet/#libraries","text":"","title":"Libraries"},{"location":"cheatsheet/#standard-libraries","text":"1 2 3 4 5 6 7 8 9 10 -- accessing the string library local s = \"Hello, World!\" print ( string.upper ( s )) -- accessing the math library local a = math.cos ( 45 ) -- accessing the table library local t = { 1 , 2 , 3 } table.insert ( t , 4 )","title":"Standard Libraries"},{"location":"cheatsheet/#custom-libraries","text":"1 2 3 4 5 6 7 8 9 10 -- defining a custom library mylib = {} function mylib . add ( a , b ) return a + b end -- using the custom library in another file local mylib = require ( 'mylib' ) local result = mylib . add ( 2 , 3 )","title":"Custom Libraries"},{"location":"cheatsheet/#gmod-9-cheatsheet","text":"","title":"GMOD 9 Cheatsheet"},{"location":"cheatsheet/#player-related","text":"_PlayerShowScoreboard(playerid) - Shows the scoreboard on the specified players screen. _PlayerSetSprint(playerid, bool) - Enable/Disable sprint for player. _PlayerFreeze(playerid, bool) - Freeze the specified player. _PlayerGetShootPos(playerid) - Returns the vector of the player\u2019s shoot position. _PlayerGetShootAng(playerid) - Returns the forward vector of the player\u2019s shoot angle. _PlayerGetActiveWeapon(playerid) - Returns the player\u2019s active weapon id. _PlayerKill(playerid) - Kill the specified player. _PlayerGiveAmmo(playerid, amount, ammotype, playsounds) - Give specified player ammo. playsounds is bool. _PlayerRespawn(playerid) - Force player to respawn. _PlayerSetDrawTeamCircle(playerid, bool) - Sets whether to draw the team circle or not. _PlayerInfo(playerid, request) - Returns info about a specific layer. Check _PlayerInfo page for usage. _PlayerChangeTeam(playerid, teamid) - Changes a player\u2019s team. _PlayerSetModel(playerid, model) - Changes a player\u2019s model. _PlayerGetRandomAllowedModel() - Returns a random allowed player model. _PlayerSetHealth(playerid, health) - Changes a player\u2019s health. _PlayerSetArmor(playerid, armor) - Changes a player\u2019s armor. _PlayerSetMaxSpeed(playerid, speed) - Changes a player\u2019s maximum speed. _PlayerAddScore(playerid, score) - Add to players score (can be minus). _PlayerSetScore(playerid, score) - Sets to players score. _PlayerAddDeath(playerid, score) - Add to players deaths score (can be minus). _PlayerGiveItem(playerid, item) - Give player named item. _PlayerGiveSWEP(playerid, script) - Give player scripted weapon. _PlayerRemoveAllWeapons(playerid) - Strip all o a player\u2019s weapons. _PlayerRemoveWeapon(playerid, item) - Strip a specific weapon. _PlayerAllowDecalPaint(playerid) - Allow the player to spraypaint now rather than waiting the 30 or so seconds. _PlayerSetDrawViewModel(playerid, bool) - Sets whether to draw the player\u2019s view model. _PlayerSelectWeapon(playerid, item) - Select weapon. _PlayerSetDrawWorldModel(playerid, bool) - Sets whether to draw the player\u2019s world model. _PlayerOption(playerid, callback, timeout) - Player has an option to select. _PlayerSetVecView(playerid, vector) - Sets the position of the view vector (0, 0, 64) default. _PlayerIsKeyDown(playerid, key) - Check whether specified key is pressed. _PlayerSpectatorStart(playerid, mode) - Start spectating. _PlayerSpectatorTarget(playerid, target) - Set spectator target for player. _PlayerSpectatorEnd(playerid) - Stop spectating mode. _PlayerSetVecDuck(playerid, vector) - Sets the position of the duck view vector (0, 0, 24) default. _ScreenText(playerid, message, x, y, r, g, b, a, fadeid, fadeout, holdtime, effect, channel) - Advanced function to print text to the screen. effect can be set to 0-2 and channel 0-5. _PrintMessage(playerid, type, message) - Print a message to a specific player. _PrintMessageAll() - Is like _PrintMessage() but for everyone on the server. _PlayerPreferredModel(playerid) - Returns the player\u2019s preferred model. Returns a blank if the model isn\u2019t valid. _PlayerSilentKill(playerid, respawn_time, dissolve) - Silently kill a player. _PlayerDetonateTripmines(playerid) _PlayerHolsterWeapon(playerid) _PlayerSetFOV(playerid, fov, time) _PlayerSetFlashlight(playerid, state) _PlayerStopZooming(playerid) _PlayerSetChaseCamDistance(playerid, distance) _PlayerLockInPlace(playerid, bool) _PlayerRemoveAllAmmo(playerid) _PlayerDisableAttack(playerid, bool) _PlayerShowCrosshair(playerid, bool) _PlayerEnableSprint(playerid, bool) _PlayerViewModelSequence(playerid, sequence) - If successful returns the length of the sequence in seconds. _PlayerGetLimit(playerid, limit) _PlayerSetAnimation(playerid, sequence) - Sets a player\u2019s animation. _PlayerSetWeaponSequence(player, sequence) - Sets a players weapon activity. _PlayerIsCrouching(playerid) - Returns true if a player is crouching. _PlayerUseVehicle(playerid, vehicle) - Make a player attempt to enter a vehicle. _PlayerGod(playerid, bool) - Give a player God Mode. _PlayerHasWeapon(playerid, item) - Returns true if the player has this weapon. _PlayerWeaponTranslateSequence(player, sequence) - Let the player\u2019s weapon decide how we should act out specific sequence. _player.ShowPanel - Show/Hide a panel by name. _player.SetContextMenu(playerid, name) - Set the player\u2019s context menu. _player.GetFlashlight(player) - returns true if flashlight is on. _player.SetFlashlight(player, on) - Set player FL on/off. _player.LastHitGroup(player) - Get the las place the player was hit. _player.ShouldDropWeapon(player, bool) - Should player drop weapon on death?","title":"Player-related"},{"location":"cheatsheet/#entity-related","text":"_EntSetMaterial(entid, material_filename) - Set the material of specified entity. _EntSetGravity(entid, gravity) - Set the gravity for specified entity. _EntGetType(entid) - Returns a entity type name. _EntGetByName(name) - Returns an entity by target name (0 if not found). _EntGetPos(entid) - Returns a vector representing the position of the entity. _EntEmitSound(entid, filename) - Make entity emit sound. _EntEmitSoundEx(entid, filename, volume_multiplier, pitch_multiplier) - Make entity emit sound. _EntSetPos(entid, vector3 pos) - Sets the position of the entity. _EntGetVelocity(entid) - Gets the entity velocity. Returned as a vector3. _EntSetVelocity(entid, vector3_velocity) - Sets the velocity of the entity. _EntGetForwardVector(entid) - Returns the forward vector. _EntGetRightVector(entid) - Returns the right vector. _EntGetUpVector(entid) - Returns the up vector. _EntFire(entid, action, value, delay) - ent_fire an entity. _EntCreate(entname) - Creates but doesn\u2019t spawn specified entity. _EntSpawn(entindex) - Spawns specified entity. _EntActivate(entindex) - Activate an entity. _EntSetKeyValue(entindex, string_keyname, string_keyvalue) - Sets an entity keyvalue (Must be done before spawning!). _EntSetModel(ent, model_name) - Sets the model of an entity. PRE-CACHE THE MODEL FIRST. _EntSetOwner(ent, ownerid) - Sets the owner. _EntGetOwner(ent) - Gets the entity\u2019s owner. _EntRemove(entindex) - Removes entity.. _EntExists(entindex) - Check if entity exists. _EntPrecacheModel(model_name) - Pre-caches a model. _EntSetAng(entid, vector3_ang) - Sets the angle of the entity (using a forward vector). _EntSetAngAngle(entid, vector3_angle) - Sets the ANGLE of the entity. _EntGetAng(entid) - Returns the angle as a normalized \u2018forward\u2019 vector. _EntGetAngAngle(entid) - Returns the angle as a vector3. _EntGetModel(entid) - Returns the entity\u2019s model name. _EntitiesFindByClass(classname) - Returns a table of entities (or nil if none). _EntitiesFindInSphere(vector_position, radius) - Returns a table of entities contained in the sphere. _EntitiesFindByName(targetname) - Returns a table of entities (or nil if none). _EntityGetPhysicsAttacker(entity) - Returns the last physics attacker. _EntitySetPhyscsAttacker(entity, attacker) - Sets the physics attacker on a specified object. _EntSetGroundEntity(entity, groundentity) - Pass entity as -1 to clear the ground entity. _EntGetGroundEntity(entity, groundentity) - Pass entity as -1 to clear the ground entity. _EntSetMoveType(entity, type) - Sets the movetype. _EntGetMoveType(entity) - Gets the movetype. _EntSetMoveCollide(entity, type) - Sets the movecollide. _EntGetMoveCollide(entity) - Gets the movecollide. _EntSetSolid(entity, type) - Sets the solid type. _EntGetSolid(entity) - Gets the solid type. _EntSetCollisionGroup(entity, group) - Sets the collision group. _EntGetCollisionGroup(entity) - Gets the collision group. _EntGetWaterLevel(entity) - Returns a number representing how under water an entity is. 0 means not underwater. 3 is totally underwater. _EntSetActivity(entid, int_sequence) - Sets anactivity for an ent. Works for NPC\u2019s only. _EntGetDisposition(npc, entity) - Gets an enemy disposition. _EntSetParent(entid, parent, attachment) - Sets an entities parent. _EntGetParent(entid) - Gets an entities parent. _EntGetName(entid) - Gets an entities name. _EntSetName(entid, name) - Sets an entities name. _EntSetMaxHealth(entid, health) - Gets entity max health. _EntGetMaxHealth(entid) - Sets entity max health.","title":"Entity-related"},{"location":"cheatsheet/#effects-related","text":"_EffectInit() - Resets the effect data _EffectSetOrigin(vector) _EffectSetAngles(vector) _EffectSetNormal(vector) _EffectSetStart(vector) _EffectSetEnt(entid) _EffectSetFlags(int) _EffectSetScale(float) _EffectSetMagnitude(float) _EffectSetRadius(float) _EffectSetAttachIndex(int) _EffectDispatch(name)","title":"Effects-related"},{"location":"cheatsheet/#file-manipulation","text":"_file.Exists(filename) - Returns true if file exists. _file.Read(filename) - Reads a file into a string. _file.Write(filename, string) - Writes a string to a file. _file.CreateDir(folder) - Creates Dir Hierarchy. _file.IsDir(folder) - Returns true if is Dir. _file.Find(wildcard) - Finds files, returns table, parameter should be like \u201cmaps/-.bsp\u201d. _file.Delete(wildcard) - Deletes specified file. _file.Rename(before, after) - Renames specified file. _ForceFileConsistency(filename) - Force the file to be the same on client and server. Should be called after pre-caching the file.","title":"File manipulation"},{"location":"cheatsheet/#server-related","text":"_StartNextLevel(map_name) - Starts the next level. _GetNextMap() - Returns next map name. _GetCurrentMap() - Returns current map name. _GetRule(rule_string) - Gets a rule. _ServerCommand(command) - Runs a console command. Don\u2019t forget to put \\n in the end. _GameSetTargetIDRules(int_rule) - Sets targetID rules. _PluginMsg(playerid, title, message, time, r, g, b, a, level) - Sends a plugin message. _PluginText(playerid, title, message, time, r, g, b, a, level) - Sends plug in text. _GetConVar_Float(name) - Get a server convar float. _GetConVar_String(name) - Get a server convar string. _GetConVar_Bool(name) - Get a server convar bool. _GetClientConVar_String(playerid, name) - Get a client convar string. _CurTime() - Returns the current time in seconds. _MaxPlayers() - Returns the max players in the server. _RunString(command) - Runs a command in the main gameplay script. _GetModPath() - Gets the path to the gmod folder (on the server). No trailing slash. _IsDedicatedServer() - Returns whether dedicated server or not. _Msg(message) - Outputs message to console. _OpenScript(filename) - Opens a script. _ALERT(message) - Internal Lua usage. Outputs error message.","title":"Server-related"},{"location":"cheatsheet/#trace","text":"_TraceAttack(victim, inflictor, attacker, amount) - Attack using the last trace. _TraceSetCollisionGroup(group) - Sets the collision group for the next trace to use. _TraceSetMask(group) - Sets the MASK_ to use for the next trace. _TraceLine(vector_start, vector_direction, length, ignore) - Traces a line. ignore is optional. _TraceEndPos() - Return the end pos from the last trace. _TraceFraction() - Return the fraction of trace completed. _TraceHitWorld() - Return the true if the last trace hit the world. _TraceHitNonWorld() - Return the true if the last trace hit non world. _TraceHit() - Return the true if the last trace hit something. _TraceGetEnt() - Return the entity that the last trace hit. _TraceGetSurfaceNormal - Return the normal of the surface that the trace hit. _TraceDidHitSky() - Returns true if last hit was the sky. _TraceDidHitHitbox() - Returns true if last hit was some kind of hitbox. _TraceGetTexture() - Returns the name of the texture that we hit. _TraceDidHitWater() - Returns true if we hit water. _MakeDecal(decal) - Makes a decal using the last trace. PlayerLookTrace(playerid, length) - Traces a line where player\u2019s looking","title":"Trace"},{"location":"cheatsheet/#sounds","text":"_PlaySound(sound_name) - Play a sound. _PlaySoundPlayer(playerid, sound_name) - Play a sound to a specific player.","title":"Sounds"},{"location":"cheatsheet/#gmodtext","text":"_GModText_Start(font_name) - Initialize the text. _GModText_SetPos(x, y) - Set Position. _GModText_AllowOffscreen(bool) - Allow the text to go offscreen. _GModText_SetEntity(entindex) - Set entity to hover over. _GModText_SetColor(r, g, b, a) - Set Colour. _GModText_SetTime(duration, fadein, fadeout) - Set Times. _GModText_SetDelay(delay) - Set delay time. _GModText_SetText(text) - Set Times. _GModText_SetAdditive(bool) - Set Additive mode. _GModText_SetEntityOffset(vector) - Set entity offset to draw the text at. _GModText_Send(playerid, index) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModText_Hide(playerid, index, fade_time, delay) - Hides specified text. _GModText_HideAll(playerid) - Hides All texts. _GModText_SendAnimate(playerid, index, length, ease) - The same as normal send but will animate from Send to the new values.","title":"GModText"},{"location":"cheatsheet/#gmodrect","text":"_GModRect_Start(material) - Initialize the rect. _GModRect_SetPos(x, y, width, height) - Set Position. _GModRect_SetEntity(entindex) - Set entity to hover over. _GModRect_SetColor(r, g, b, a) - Set Colour. _GModRect_SetTime(duration, fadein, fadeout) - Set Times. _GModRect_SetDelay(delay) - Set delay time. _GModRect_SetAdditive(bool) - Set Additive mode. _GModRect_SetEntityOffset(vector) - Set entity offset to draw the text at. _GModRect_Send(playerid, index) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModRect_SendAnimate(playerid, index, length, ease) - If player is 0 it is sent to everyone. Index says which slot this text should fill. _GModRect_Hide(playerid, index, fade_time, delay) - Hides specified rect. _GModRect_HideAll(playerid) - Hides All rects.","title":"GModRect"},{"location":"cheatsheet/#gmodquad","text":"_GModQuad_Hide(playerid, index, fade_time, delay) - Hides specified world quads. _GModQuad_HideAll(playerid) - Hides All world quads. _GModQuad_Start(material) - Initialize the quad. _GModQuad_SetVector(corner, vector) - Set a vector of one of the quad\u2019s corners. Acceptable corner values: 0-3. _GModQuad_SetTimings(delay, fadein, life, fadeout) - Set Timings. _GModQuad_SetEntity(entityid) - SetEntity to follow. _GModQuad_Send(playerid, index) - Send a quad to player. All players if player is 0. _GModQuad_SenAnimate(playerid, index, length, ease) - Send a quad to player. All players if player is 0.","title":"GModQuad"},{"location":"cheatsheet/#game-events","text":"_gameevent.Start(name) - Starts a (fake) gameevent. _gameevent.SetString(name, value) - Set Variable. _gameevent.SetInt(name, value) - Set Variable. _gameevent.Fire() - Fire event.","title":"Game Events"},{"location":"cheatsheet/#spawnmenu","text":"_spawnmenu.AddItem(playerid, category, name, modelent) _spawnmenu.RemoveCategory(playerid, category) _spawnmenu.RemoveAll(playerid) _spawnmenu.SetCategory(playerid, category)","title":"Spawnmenu"},{"location":"cheatsheet/#npc-related","text":"_SetDefaultRelationship(class, class, disposition) - Sets the default relationship between two life types. _npc.ExitScriptedSequence(ent) _npc.SetSchedule(end, sched) _npc.SetLastPosition(ent, vector) _npc.AddRelationship(ent, ent, disposition, priority) - priority is int","title":"NPC-related"},{"location":"cheatsheet/#physics-related","text":"_phys.EnableMotion(entid, boo) - Enable/Disable motion. _phys.EnableDrag(entid, bool) - Enable/Disable drag. _phys.EnableGravity(entid, bool) - Enable/Disable gravity. _phys.EnableCollisions(entid, bool) - Enable/Disable Collisions. _phys.GetMass(entid) - Gets mass. _phys.SetMass(entid, mass) - Sets mass. _phys.Sleep(entid) - Make object sleep. _phys.Wake(entid) - Wake a sleeping object. _phys.IsAsleep(entid) - Check whatever object is rested. _phys.HasPhysics(entid) - Returns true if entity has a physics object. _phys.ConstraintSetEnts(constraint, entity_1, entity_2) - Set Entities for constraint. _phys.ApplyForceCenter(entid, force) - Pushes an object from the center. force is vector3. _phys.ApplyForceOffset(entid, force, worldpos) - Pushes an object from the center. force and worldpos are vector3. _phys.ApplyTorqueCenter(entid, force) - Apply torque to the object. force is vector3.","title":"Physics-related"},{"location":"cheatsheet/#team-related","text":"_TeamAddScore(teamid, score) - Add score for a team. _TeamSetScore(teamid, score) - Set score for a team. _TeamNumPlayers(teamid) - Get the number of players on a team. _TeamCount() - Returns the number of teams _TeamScore(teamid) - Returns the total team score. _TeamSetName(teamid, name) - Sets the name of the team.","title":"Team-related"},{"location":"cheatsheet/#utilities","text":"_util.PlayerByName(name) - Returns playerid of player with name. _util.PlayerByUserId(playerid) - Returns playerid. _util.EntsInBox(min, max) - Returns entities contained in a box. min and max are vectors. _util.DropToFloor(ent) - Drops entity to floor. _util.ScreenShake(pos, amp, frequency, duration, radius) - Shakes screen. _util.PointAtEntity(ent1, ent2) - Point one entity towards the other.","title":"Utilities"},{"location":"cheatsheet/#swep-related","text":"All these function are only used when making SWEPs, check SWEP part. _WeaponScriptedAssign(weapon, script) Assign a script to a scripted weapon. _SWEPSetSound(weapon_index, action, sound) Sets SWEP sound. _SWEPUseAmmo(weapon_index, clip[0|1], amount) Takes ammo from SWEP gun. _SWEPUpdateVariables(weapon_index) Re-reads all the \u2018fetch\u2019 variables. You should call this if you have changed the accuracy etc. _SWEPRunString(weapon_index, string) Runs a Lua string in the weapon\u2019s Lua instance. _swep.GetClipAmmo(weapon_id, clip[0|1]) Get amount of ammo in a clip. _swep.SetClipAmmo(weapon_index, clip[0|1], clip) Get amount of ammo in a clip. _swep.GetDeathIcon(weapon_index) Gets death icon name.","title":"SWEP-related"},{"location":"cheatsheet/#weapon-related","text":"_WeaponSetModel(weapon_name, model_type, model_name) Sets weapon model. _WeaponSetSlot(weapon_name, slot, pos) - Sets weapon slot. _WeaponSetSound(weapon_name action, sound) - Sets weapon sound. _WeaponSetFOV(weapon_name, fov) - Sets a weapon\u2019s draw FOV. _WeaponFlipHands(weapon_name, bool) - Flips a weapon\u2019s hands. _WeaponSetDamage(weapon_name, damage) - Sets the damage that a bullet from this gun does. _WeaponSetup(weapon_name, anim_prefix, clip_size_1, clip_size_2, default_ammo_1, default_ammo_2, primary_ammo, secondary_ammo) - Sets animation prefix. (thanks to the GMOD 9 lua docs for the Lua reference)","title":"Weapon-related"},{"location":"downloading/","text":"Downloading \u00b6 Garry\u2019s Mod 9 is available for free on these sources (well, actually it\u2019s free on everywhere, i just listed those sources that you could trust, because you can get a virus from other sources): ModDB gmod9.com (fixed) In order to install Garry\u2019s Mod 9, you\u2019ll need to have Source SDK Base 2006 , not a newer version because it wouldn\u2019t work. It is available on Steam, but in the library, and in order to find it, make sure to filter by all: Then click on the search bar and search for \u201c Source SDK Base 2006 \u201d, then click on Install: After you have installed it, do the following: ModDB \u00b6 Click the \u201cDownload Now\u201d button, open the installer, and follow the instructions to install the mod. Just install it into your \u201c sourcemods \u201d folder in the steam/steamapps thing. gmod9.com \u00b6 Just drag the folder from the archive to your \u201c sourcemods \u201d folder in the steam/steamapps thing. After you have done the procedure, you also need to put in the launch options of Source SDK Base 2006 the following: -game \"(path to gmod 9 here) -novid\" , where the (path to gmod 9 here) is the directory you are storing your Garry\u2019s Mod 9 in. And when you have done that, just run the game and BOOM! It works!","title":"Downloading"},{"location":"downloading/#downloading","text":"Garry\u2019s Mod 9 is available for free on these sources (well, actually it\u2019s free on everywhere, i just listed those sources that you could trust, because you can get a virus from other sources): ModDB gmod9.com (fixed) In order to install Garry\u2019s Mod 9, you\u2019ll need to have Source SDK Base 2006 , not a newer version because it wouldn\u2019t work. It is available on Steam, but in the library, and in order to find it, make sure to filter by all: Then click on the search bar and search for \u201c Source SDK Base 2006 \u201d, then click on Install: After you have installed it, do the following:","title":"Downloading"},{"location":"downloading/#moddb","text":"Click the \u201cDownload Now\u201d button, open the installer, and follow the instructions to install the mod. Just install it into your \u201c sourcemods \u201d folder in the steam/steamapps thing.","title":"ModDB"},{"location":"downloading/#gmod9com","text":"Just drag the folder from the archive to your \u201c sourcemods \u201d folder in the steam/steamapps thing. After you have done the procedure, you also need to put in the launch options of Source SDK Base 2006 the following: -game \"(path to gmod 9 here) -novid\" , where the (path to gmod 9 here) is the directory you are storing your Garry\u2019s Mod 9 in. And when you have done that, just run the game and BOOM! It works!","title":"gmod9.com"},{"location":"faq/","text":"Frequently Asked Questions (not) \u00b6 Is mayonnaise an instrument? \u00b6 I wish. Why is GMOD 9 dead? \u00b6 Because it is dead. No, but seriously, it was made in 2005. I bet that\u2019s older than you. My wife divorced me and took my 8 kids. What should I do? \u00b6 Not my fault. \ud83d\ude0e How do I tie a tie? \u00b6 You don\u2019t. The tie ties you up in the basement. What is the meaning of life? \u00b6 42. I\u2019m choking on my food, how do I save myself? \u00b6 Die. Or, even better, listen to our Lord and Saviour Andrew Tate, the Top G Himself: BREATHE AIR! Clubette. \u00b6 Kill yourself. My knight is hanging on e6, how do I save it without throwing the game? \u00b6 Move the knight to d7. Obviously. bee \u00b6 (insert bee movie script here) What are the lyrics to XO by Eden? \u00b6 SHE\u2019S IN LOVE WITH THE CONCEPT IF WE\u2019RE ALL JUST HOW SHE IMAGINED WE\u2019RE IN LOVE, WE JUST DON\u2019T KNOW IT YET Am I gay? \u00b6 Ask yourself this question: do you like kissing boys? If so, then maybe idk I\u2019m not your therapist lmfao","title":"FAQ"},{"location":"faq/#frequently-asked-questions-not","text":"","title":"Frequently Asked Questions (not)"},{"location":"faq/#is-mayonnaise-an-instrument","text":"I wish.","title":"Is mayonnaise an instrument?"},{"location":"faq/#why-is-gmod-9-dead","text":"Because it is dead. No, but seriously, it was made in 2005. I bet that\u2019s older than you.","title":"Why is GMOD 9 dead?"},{"location":"faq/#my-wife-divorced-me-and-took-my-8-kids-what-should-i-do","text":"Not my fault. \ud83d\ude0e","title":"My wife divorced me and took my 8 kids. What should I do?"},{"location":"faq/#how-do-i-tie-a-tie","text":"You don\u2019t. The tie ties you up in the basement.","title":"How do I tie a tie?"},{"location":"faq/#what-is-the-meaning-of-life","text":"42.","title":"What is the meaning of life?"},{"location":"faq/#im-choking-on-my-food-how-do-i-save-myself","text":"Die. Or, even better, listen to our Lord and Saviour Andrew Tate, the Top G Himself: BREATHE AIR!","title":"I'm choking on my food, how do I save myself?"},{"location":"faq/#clubette","text":"Kill yourself.","title":"Clubette."},{"location":"faq/#my-knight-is-hanging-on-e6-how-do-i-save-it-without-throwing-the-game","text":"Move the knight to d7. Obviously.","title":"My knight is hanging on e6, how do I save it without throwing the game?"},{"location":"faq/#bee","text":"(insert bee movie script here)","title":"bee"},{"location":"faq/#what-are-the-lyrics-to-xo-by-eden","text":"SHE\u2019S IN LOVE WITH THE CONCEPT IF WE\u2019RE ALL JUST HOW SHE IMAGINED WE\u2019RE IN LOVE, WE JUST DON\u2019T KNOW IT YET","title":"What are the lyrics to XO by Eden?"},{"location":"faq/#am-i-gay","text":"Ask yourself this question: do you like kissing boys? If so, then maybe idk I\u2019m not your therapist lmfao","title":"Am I gay?"},{"location":"lan/","text":"LAN \u00b6 In order to play using LAN, you either need to use real LAN (be near right to each other), or use the Hamachi tool. Hamachi \u00b6 In order to play lan using Hamachi, you must install it. Open the link, and click on the Download now button, open the installer and follow the instructions. When you have installed Hamachi , you need to open it, and click on the power on button. It may ask you to log in, you need to log in/sign in. Host \u00b6 In order to host a LAN game, you need to click on the Network tab (in the app, of course), and click on \u201cCreate a new network\u201d (not the exact translation to English), then put the name and password of the network (make sure to remember it), and now you can invite people to play. In order to make a LAN server, open GMOD 9, click on the Create Server button, fill everything how you want to and start playing. It\u2019s that easy! Join \u00b6 In order to join a LAN game, you need to click on the Network tab (in the app, of course), and click on \u201cJoin a existing network\u201d (not the exact translation to English), fill the name and password field, and if it\u2019s correct, you can start playing. Open GMOD 9, click on Server Broswer/Find Servers button, in the server browser, click on the LAN tab, and find the server you want to play in. It\u2019s that easy!","title":"LAN"},{"location":"lan/#lan","text":"In order to play using LAN, you either need to use real LAN (be near right to each other), or use the Hamachi tool.","title":"LAN"},{"location":"lan/#hamachi","text":"In order to play lan using Hamachi, you must install it. Open the link, and click on the Download now button, open the installer and follow the instructions. When you have installed Hamachi , you need to open it, and click on the power on button. It may ask you to log in, you need to log in/sign in.","title":"Hamachi"},{"location":"lan/#host","text":"In order to host a LAN game, you need to click on the Network tab (in the app, of course), and click on \u201cCreate a new network\u201d (not the exact translation to English), then put the name and password of the network (make sure to remember it), and now you can invite people to play. In order to make a LAN server, open GMOD 9, click on the Create Server button, fill everything how you want to and start playing. It\u2019s that easy!","title":"Host"},{"location":"lan/#join","text":"In order to join a LAN game, you need to click on the Network tab (in the app, of course), and click on \u201cJoin a existing network\u201d (not the exact translation to English), fill the name and password field, and if it\u2019s correct, you can start playing. Open GMOD 9, click on Server Broswer/Find Servers button, in the server browser, click on the LAN tab, and find the server you want to play in. It\u2019s that easy!","title":"Join"},{"location":"lua-main/","text":"Introduction to Lua \u00b6 Lua is a lightweight, powerful, and efficient scripting language that was designed with embedded systems in mind. It was first released in 1993 and has since gained popularity for its simplicity, flexibility, and ease of integration into existing software projects. Lua is commonly used as a scripting language in video games, embedded systems, and other applications that require scripting capabilities. Features of Lua: \u00b6 Lightweight: Lua has a small and efficient implementation, making it ideal for embedded systems and resource-constrained environments. Simple Syntax: Lua has a clean and intuitive syntax inspired by other scripting languages like Python, which makes it easy to learn and read. Dynamic Typing: Lua uses dynamic typing, allowing variables to hold values of any type. This flexibility makes Lua suitable for rapid prototyping and scripting tasks. Garbage Collection: Lua features automatic memory management through garbage collection, relieving developers from manual memory management tasks. Extensibility: Lua can be easily extended with C/C++ code, allowing developers to integrate Lua into existing applications or add custom functionality. Powerful Data Structures: Lua provides powerful built-in data structures such as tables, arrays, and associative arrays, making it versatile for various data manipulation tasks. LuaJIT: Lua Just-In-Time Compiler (LuaJIT) is a popular implementation of Lua that can significantly improve performance by dynamically compiling Lua code. To learn Lua and explore its various features, you can refer to the Lua Cheatsheet , which provides a quick reference guide for Lua syntax and commonly used functions. Additionally, the following resources can help you get started with Lua: Official Lua Website : The official Lua website provides documentation, tutorials, and resources for beginners and experienced Lua developers. Lua Tutorial on tutorialspoint : tutorialspoint offers a comprehensive Lua tutorial with interactive examples to help you understand the language fundamentals. With these resources, you\u2019ll be equipped to start your journey with Lua and explore its capabilities as a versatile scripting language. Happy scripting and creating mods for GMOD 9!","title":"Main"},{"location":"lua-main/#introduction-to-lua","text":"Lua is a lightweight, powerful, and efficient scripting language that was designed with embedded systems in mind. It was first released in 1993 and has since gained popularity for its simplicity, flexibility, and ease of integration into existing software projects. Lua is commonly used as a scripting language in video games, embedded systems, and other applications that require scripting capabilities.","title":"Introduction to Lua"},{"location":"lua-main/#features-of-lua","text":"Lightweight: Lua has a small and efficient implementation, making it ideal for embedded systems and resource-constrained environments. Simple Syntax: Lua has a clean and intuitive syntax inspired by other scripting languages like Python, which makes it easy to learn and read. Dynamic Typing: Lua uses dynamic typing, allowing variables to hold values of any type. This flexibility makes Lua suitable for rapid prototyping and scripting tasks. Garbage Collection: Lua features automatic memory management through garbage collection, relieving developers from manual memory management tasks. Extensibility: Lua can be easily extended with C/C++ code, allowing developers to integrate Lua into existing applications or add custom functionality. Powerful Data Structures: Lua provides powerful built-in data structures such as tables, arrays, and associative arrays, making it versatile for various data manipulation tasks. LuaJIT: Lua Just-In-Time Compiler (LuaJIT) is a popular implementation of Lua that can significantly improve performance by dynamically compiling Lua code. To learn Lua and explore its various features, you can refer to the Lua Cheatsheet , which provides a quick reference guide for Lua syntax and commonly used functions. Additionally, the following resources can help you get started with Lua: Official Lua Website : The official Lua website provides documentation, tutorials, and resources for beginners and experienced Lua developers. Lua Tutorial on tutorialspoint : tutorialspoint offers a comprehensive Lua tutorial with interactive examples to help you understand the language fundamentals. With these resources, you\u2019ll be equipped to start your journey with Lua and explore its capabilities as a versatile scripting language. Happy scripting and creating mods for GMOD 9!","title":"Features of Lua:"},{"location":"modding/","text":"Mods \u00b6 In order to download mods for GMOD 9, all you need to do is to download the mod from GameBanana , put it into your \u201c mods \u201d folder of the GMOD 9 path and BOOM! You have the mod installed. Even if it a map, you can just check if you did install it, and if not, you need to goto the mod folder, then find the map(s) you want to install, copy it/them and paste them into the \u201c maps \u201d folder of your GMOD 9 path.","title":"Mods"},{"location":"modding/#mods","text":"In order to download mods for GMOD 9, all you need to do is to download the mod from GameBanana , put it into your \u201c mods \u201d folder of the GMOD 9 path and BOOM! You have the mod installed. Even if it a map, you can just check if you did install it, and if not, you need to goto the mod folder, then find the map(s) you want to install, copy it/them and paste them into the \u201c maps \u201d folder of your GMOD 9 path.","title":"Mods"}]}